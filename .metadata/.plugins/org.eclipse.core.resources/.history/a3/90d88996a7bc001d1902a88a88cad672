package com.kh.websocket;

import java.util.HashMap;
import java.util.Map;

import javax.websocket.EndpointConfig;
import javax.websocket.OnMessage;
import javax.websocket.OnOpen;
import javax.websocket.Session;
import javax.websocket.server.ServerEndpoint;

// 일반 클래스를 웹소켓 서버로 등록하기 위한 방법
@ServerEndpoint(value="/chatting.do") //클래스 선언부에 선언시 웹소켓 서버로 등록이됨




public class ChattingServer {

	//내부에 클라이언트가 요청하는 내용을 처리하는 메소드 등록
	private static Map<String, Session> clients = new HashMap();
	
	@OnOpen
	public void open(Session session, EndpointConfig config) {
		//접속을 요청한 클라이언트와 연결이 수립되면 실행되는 메소드
		System.out.println("클라이언트 접속함");
		System.out.println(session.getId());
		clients.put(session.getId(), session);
		
	}
	
	//클라이언트들이 보내는 메시지를 처리하는 함수
	@OnMessage
	public void message(Session session, String msg) { // "발송자, 수신자, 내용"
		//첫번쨰 매개변수 session 객체 안에는 메세지를 보낸 클라이언트의 session객체가 담겨있음.
		//두번째 매개변수 msg에는 클라이언트가 보낸 메세지가 담겨있다.("발신자, 수신자, 내용")
		
		System.out.println(session.getId()+"::::::"+msg);
		
		//클라이언트가 보낸 메시지를 파싱 
		String[] data = msg.split(",");
		//0번 인덱스 : 발송자, 1번 인덱스는 : 수신자, 2번인덱스 : 메시지
		
		//보낸데이터 세션에 저장할수 있음.
		session.getUserProperties().put("msg", msg);
		//클라이언트가 보낸 데이터를 다른 접속한 클라이언트에게 전송하기 
		
	}

	
	
	
	
	


}
