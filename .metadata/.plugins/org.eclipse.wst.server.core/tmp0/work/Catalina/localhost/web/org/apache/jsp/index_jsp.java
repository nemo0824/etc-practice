/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.73
 * Generated at: 2023-03-07 05:54:57 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("   \r\n");
      out.write("   <input type=\"text\" id=\"sender\" size=\"10\" placeholder=\"보내는 이름\">\r\n");
      out.write("   <input type=\"text\" id=\"receiver\" size=\"10\" placeholder=\"받는사람 이름\">\r\n");
      out.write("   <input type=\"text\" id=\"msg\" placeholder=\"전송할 메세지 입력\">\r\n");
      out.write("   <button onclick=\"sendMsg();\">전송</button>\r\n");
      out.write("   \r\n");
      out.write("   <div id=\"msgContainer\">\r\n");
      out.write("   \r\n");
      out.write("   </div>\r\n");
      out.write("   \r\n");
      out.write("   <script>\r\n");
      out.write("      // 웹소켓 서버에 연결\r\n");
      out.write("      // WebSocket 객체 생성하기 192.168.30.183\r\n");
      out.write("      // const socket = new WebSocket(\"ws://ip:port/");
      out.print(request.getContextPath() );
      out.write("/chatting.do\");\r\n");
      out.write("      const socket = new WebSocket(\"ws://192.168.30.183:8082/");
      out.print(request.getContextPath() );
      out.write("/chatting.do\");\r\n");
      out.write("      // https://ip:포트번호/~~\r\n");
      out.write("      // http -> ws : ~\r\n");
      out.write("      // https -> wss: ~\r\n");
      out.write("      \r\n");
      out.write("      // socket 설정하기\r\n");
      out.write("      // 1. 접속 후 실행되는 이벤트 핸들러 등록\r\n");
      out.write("      socket.onopen = function(e){\r\n");
      out.write("         console.log(\"접속 성공\");\r\n");
      out.write("         console.log(e);\r\n");
      out.write("      }\r\n");
      out.write("      \r\n");
      out.write("      \r\n");
      out.write("      // 2. 웹소켓 서버에서 sendText, sendObject메소드를 실행하면 실행되는 함수\r\n");
      out.write("      socket.onmessage = function(e){\r\n");
      out.write("    	  console.log('메세지 수신');\r\n");
      out.write("    	  //수신된 데이터를 받으려면 이벤트객체(e)의 data속성을 이용함.\r\n");
      out.write("    	  console.log(e);\r\n");
      out.write("    	  console.log(e.data);\r\n");
      out.write("    	  \r\n");
      out.write("    	  let msg = e.data.split(\",\");\r\n");
      out.write("    	  if(msg[0] == $(\"#sender\").val()){\r\n");
      out.write("    		  $(\"#msgContainer\").append($(\"<p>\").text(\"<\"+msg[0]+\">\"+msg[2]).css(\"text-align\",\"left\"))\r\n");
      out.write("    	  }else{\r\n");
      out.write("    		  $(\"#msgContainer\").append($(\"<p>\").text(\"<\"+msg[1]+\">\"+msg[2]).css(\"text-align\",\"right\")) \r\n");
      out.write("    	  }\r\n");
      out.write("    	  \r\n");
      out.write("      }\r\n");
      out.write("      \r\n");
      out.write("      // 3. 웹소켓 서버에서 메세지를 전송하는 함수.\r\n");
      out.write("      const sendMsg = () => {\r\n");
      out.write("         // 전송할 메세지 전처리\r\n");
      out.write("         // 전처리한 메세지를 전송하는 방법 : socket.send(데이터);\r\n");
      out.write("         // 발송자, 수신자, 메세지내용 \r\n");
      out.write("         socket.send($(\"#sender\").val()+\",\"+$(\"#receiver\").val()+\",\"+$(\"#msg\").val());\r\n");
      out.write("      };\r\n");
      out.write("      \r\n");
      out.write("      \r\n");
      out.write("      \r\n");
      out.write("      \r\n");
      out.write("   </script>\r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
